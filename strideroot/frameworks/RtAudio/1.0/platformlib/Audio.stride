
constant AudioRate {
    value: 44100 # TODO this needs to be set from the hardware configuration file
}


_domainDefinition AudioDomain {
	domainName: "AudioDomain"
	framework: _RtAudioFramework
	rate: AudioRate
	globalsTag: "Includes"
	declarationsTag: "Declarations"
	processingTag: "Processing"
	initializationTag: "Initialization"
	cleanupTag: "Cleanup"
	domainFunction: '
	int audio_buffer_process( void *outputBuffer, void *inputBuffer, unsigned int nBufferFrames,
           double streamTime, RtAudioStreamStatus status, void *data )
{
  if ( status ) std::cout << "Stream over/underflow detected." << std::endl;
  //unsigned long *bytes = (unsigned long *) data;
  MY_TYPE *in = (MY_TYPE *)inputBuffer;
  MY_TYPE *out = (MY_TYPE *)outputBuffer;
  while(nBufferFrames-- > 0) {
%%domainCode%%
			in += NUM_IN_CHANNELS;
			out += NUM_OUT_CHANNELS;
  }
  return 0;
}
'
}



# Audio ---------------
platformType _HwInput {
    typeName: '_hwInput'
#	numInputs: 0
	outputs: ["real"]
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "in[%%bundle_index%%]"
    inherits: ['signal']
}

platformType _HwOutput {
    typeName: '_hwOutput'
	inputs: ["real"]
#	numOutputs: 0
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "out[%%bundle_index%%] = %%intoken:0%%;"
    inherits: ['signal']
}

#constant _NumInputChannels {value: 2}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: AudioDomain
}

#constant _NumOutputChannels {value: 2}
_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: AudioDomain
}

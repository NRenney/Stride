
# Declare an Oscillator
# Connect its output to audio output 1 using a stream operator
Oscillator (
type: 		Sine
amplitude: 	1.0
frequency: 	440.0
phase: 		0.0
reset:		off
) 
>> AudioOut[1:2];




constant Frequency {
value:	220.0
meta:	none
}

Oscillator (
type: 		Sine
amplitude: 	0.5
frequency: 	Frequency
phase: 		0.0
reset:		off
)
+ Oscillator (
type: 		Sine
amplitude: 	0.4
frequency: 	Frequency * 1.5
phase: 		0.0
reset:		off
)
>> AudioOut[1:2];


constant Frequency {
value:	220.0
meta:	none
}

Oscillator (
type: 		[ Sine, Sine ]
amplitude: 	[ 0.5, 0.4 ]
frequency: 	[ Frequency , Frequency * 1.5]
phase: 		[ 0.0, 0.0 ]
reset:		[ off, off]
)
>> Mix ()
>> AudioOut[1:2];

constant Frequency {
value:	220.0
meta:	none
}

Oscillator (
type: 		Sine
amplitude: 	[ 0.5, 0.4 ]
frequency: 	[ 1.0 , 1.5] * Frequency
phase: 		0.0
reset:		off
)
>> Mix ()
>> AudioOut[1:2];

constant Frequency {
value:	220.0
meta:	none
}

signal SineWaveUnison {
default:	0.0
rate:		AudioRate
reset:		MasterReset
meta:		'Sine wave Oscillator with base frequency.'
}

signal SineWaveFifth {
default:	0.0
rate:		AudioRate
reset:		MasterReset
meta:		'Sine wave Oscillator with relative frequency.'
}

Oscillator (
type: 		Sine
amplitude: 	1.0
frequency: 	Frequency
phase: 		0.0
reset:		off
)	
>> SineWaveUnison;

Oscillator (
type: 		Sine
amplitude: 	1.0
frequency: 	Frequency * 1.5
phase: 		0.0
reset:		off
)
>> SineWaveFifth;

SineWaveUnison * 0.5 + SineWaveFifth * 0.4 >> AudioOut[1:2];

constant Range {
value: 	0.75
meta:	'Panning limits.'
}

signal PanPosition {
default:	0.0
rate:		1024
reset:		MasterReset
meta:		'Pan position control'
}

Oscillator (
type: 		Triangle
amplitude: 	1.0
frequency: 	2.0
phase: 		0.0
reset:		off
)
>> Map (
mode:		Linear
minimum:	-Range
maximum:	Range
bypass:		off
)
>> Round (
mode:		Truncate
increment:	0.01
bypass:		off
)
>> PanPosition;

Mix ( 
signalList:	[SineWaveUnison, SineWaveFifth]
biasList: 	0.0
gainList: 	[0.5, 0.4]
bypass:		off
)
>> Pan (
position:	PanPosition
bypass:		off	
)
>> AudioOut[1:2];	


signal ThreeSineWaves {
default: 	0.0
rate:		AudioRate
reset:		MasterReset
meta:		'Three sine wave Oscillators.'
}

Oscillator (
type: 		Sine
amplitude: 	[ 1.0, 0.66, 0.33 ]
frequency: 	[ 220.0, 440.0, 880.0 ]
phase: 		0.0
reset:		off
)
>> Mix ()
>> ThreeSineWaves; 

# The amplitude of 'ThreeSineWaves' is 2.0
# The amplitude should be limited to 1.0 to avoid Clipping at the DAC.
ThreeSineWaves * 0.5 >> AudioOut[1];


# Declare an osc block
oscIn OSC {
hostIP:		'192.168.1.1'
incomingPort:	8000
incomingList:	['Fundamental']
meta:		none
}

# Declare a control block
# The rate is set to none since OSC messages are asynchronous
signal Fundamental {
default:	110.0
rate:		none
reset:		MasterReset
meta:		'Fundamental frequency change over OSC.'  
}

# Connect the 'OSC' block to the 'Fundamental' control block
OSC 
>> Clip (
minimum:	22.5
maximum:	7040.0
bypass:		off
)
>> Round (
mode:		Floor
increment:	0.01
bypass:		off
)
>> Fundamental;

Oscillator (
type: 		Sine
amplitude: 	[ 1.0, 0.66, 0.33 ]
frequency: 	[ 1.0 , 2.0, 3.0 ] * Fundamental
phase: 		0.0
reset:		off
) 
* 0.45
>> Mix ()
>> AudioOut[1];

constant Fundamental {
value: 55.0
meta: 'Fundamental frequency.'
}

generator ThreeHarmonicPartials {
channelsOut:	1
aliasList:	[ 'fundamental', 'outputLevel' ]
propertyBlocks:	[ 
constant FundamentalFrequency { 
value:	440.0
meta:	'Default frequency.'
}, 
constant Level { 
value:	0.5
meta:	'Default level.' 
}
]
internalBlocks:	none
setup:		none
connections:
[
Oscillator (
type: 		Sine
amplitude: 	[ 1.0, 0.66, 0.33 ]
frequency: 	[ 1.0 , 2.0, 3.0 ] * FundamentalFrequency  
phase: 		0.0
reset:		off
) 
* Level
>> Mix ()
>> ChannelOut[1];
]
meta:		'Three harmonic partials with fundamental frequency and level control.'	
}

signal HarmonicPartialsPlusFifths {
default:	0.0
rate:		AudioRate
reset:		MasterReset
meta:		'Sum of three harmonic partials and their fifths'
}

ThreeHarmonicPartials (
fundamental:	[ 1.0, 1.5 ] * Fundamental
outputLevel:	[ 0.45, 0.35 ]
reset:		off
)
>> Mix ()
>> HarmonicPartialsPlusFifths;

generator AlarmPatch {
channelsOut:	1
aliasList:	[ 'carFreq', 'modFreq', 'modPhase' ]
propertyBlocks:	[ 	constant CFreq {
value:	440.0
meta:	none
}, 
constant MFreq {
value: 2.0
meta:	none
}, 
constant MPhase {
value: 0.0
meta:	none
}
]
internalBlocks:	[signal Amplitude {
default:	0.0
rate:		2048
reset:		MasterReset
meta:		none
}]
setup:		none				
connections:	[	Oscillator (
type: 		Square
amplitude:	1.0
frequency:	MFreq
phase:		MPhase
reset:		off
)
>> LowPass( 					
cutOff: 50
reset:	off
bypass:	off
)
>> Map (
mode:		Linear
minimum:	0.0
maximum:	1.0
bypass:		off
)
>> Amplitude; 
,
Oscillator (
type: 		Sine
amplitude:	Amplitude
frequency:	CFreq
phase:		0.0
reset:		off						
)
>> ChannelOut[1];
]
meta:		none
}


AlarmPatch ( 
carFreq:	[600.0, 800.0]		
modFreq:	2.0
modPhase:	[0.0, 180.0]
reset:		off
)
>> Mix ()
>> AudioOut[1:2];

constant UpdateRate {
value:	10.0
meta:	none
}

constant Pi {
value:	3.14159265359
meta:	none
}

signal CutOffFreqValue {
default:	0.0
rate: 		UpdateRate
reset:		MasterReset
meta:		'BiQuad CutOff Frequency Control.'
}

Oscillator (
type:		Sine
amplitude:	1.0
frequency:	1.0 / 2.0 * Pi * UpdateRate
phase:		0.0
reset:		off
)
>> Rectify (
mode: 	'full'
bypass:	off
)
>> Map (
mode:		Linear
minimum:	0.0
maximum:	4000.0
bypass:		off
)
>> CutOffFreqValue;

ImpulseTrain (
amplitude:	1.0
frequency: 	UpdateRate
phase:		0.0
count:		none
reset:		off
start:		none
stop:		none
) 
>> BiQuad (
type:			LowPass
centerFrequency:	CutOffFreqValue	
resonance:		2.0
reset:			off
bypass:			off
)
>> Level(
gainType:	Linear
gain: 		0.5
bias:		0.0
bypass:		off
)
>> AudioOut[1:2];

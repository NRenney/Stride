
_platform _GammaPlatform {
    name: "Gamma"
}

_domain _PlatformDomain {
    name: _AudioDomain
    platform: _GammaPlatform
}

_domain _AudioDomain {
    name: "AudioDomain"
    platform: _GammaPlatform
}

_domain _SerialInDomain {
    name: "SerialInDomain"
    platform: _GammaPlatform
}

_domain _SerialOutDomain {
    name: "SerialOutDomain"
    platform: _GammaPlatform
}

constant PlatformRate {
    value: 44100
}

constant AudioRate {
    value: PlatformRate
}

# Audio ---------------
platformType _HwInput {
    typeName: '_hwInput'
	numInputs: 0
	numOutputs: 2
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.in(%%bundle_index%%)"
    inherits: ['signal']
}

platformType _HwOutput {
    typeName: '_hwOutput'
	numInputs: 2
	numOutputs: 0
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.out(%%bundle_index%%) = %%intoken:0%%;"
    inherits: ['signal']
}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: _AudioDomain
}

_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: _AudioDomain
}

platformType _OscOutType {
    typeName: '_oscOutType'
    numInputs: 4
	numOutputs: 0
    include: ["lo/lo.h"]
    linkTo: ["lo"]
    declarations: ''
    initialization: ["// INIT OSC"]
    processing: '
	char portStr[16];
	sprintf(portStr, "%d", (int) %%intoken:3%%);
	lo_address addr = lo_address_new(%%intoken:2%%.c_str(), portStr);
    lo_send(addr, %%intoken:1%%.c_str() , "f", %%intoken:0%%);
	'
    inherits: ['signal']
}

platformType _SelectType {
    typeName: '_selectType'
    numInputs: 3
	numOutputs: 1
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "%%intoken:0%% ? %%intoken:1%% : %%intoken:2%%"
    inherits: ['signal']
}

# Serial ------------------------

platformType _SerialOutType {
    typeName: '_serialOutType'
	numInputs: 2
	numOutputs: 0
    include: ["serial/serial.h", "iostream"]
	linkDir: ["serial/build"]
    linkTo: ["serial"]
    declarations: ''
    initialization: ["// Not implemented"]
    processing: "
	
    size_t bytes_wrote = my_serial.write(test_string);
#ifdef _WIN32
//      Sleep(milliseconds); // 100 ms
#else
//      usleep(milliseconds*1000); // 100 ms
#endif	
	
	
	"
    inherits: ['signal']
}

platformType _SerialInType {
    typeName: '_serialInType'
	numInputs: 0
	numOutputs: 1
	includeDir: ["serial/include"]
    include: ["serial/serial.h", "iostream"]
	linkDir: ["serial/build"]
    linkTo: ["serial"]
    declarations: ''
    initialization: ['
  unsigned long baud = 9600;
  string port =""
  // port, baudrate, timeout in milliseconds
  serial::Serial my_serial(port, baud, serial::Timeout::simpleTimeout(1000));		
  if(my_serial.isOpen())
    std::cout << " Yes." << std::endl;
  else
    std::cout << " No." << std::endl;
		
		']
    processing: "
	size_t bytes_wrote = my_serial.write(test_string);
	// Perhaps check if things were written properly?	
	"
    inherits: ['signal']
}

_platform _GammaPlatform {
    name: "Gamma"
}

_domain _PlatformDomain {
    name: _AudioDomain
    platform: _GammaPlatform
}

_domain _AudioDomain {
    name: "AudioDomain"
    platform: _GammaPlatform
}

_domain _SerialInDomain {
    name: "SerialInDomain"
    platform: _GammaPlatform
}

_domain _SerialOutDomain {
    name: "SerialOutDomain"
    platform: _GammaPlatform
}

constant PlatformRate {
    value: 44100
}

constant AudioRate {
    value: PlatformRate
}

# Audio ---------------
platformType _HwInput {
    typeName: '_hwInput'
#	numInputs: 0
	outputs: ["real"]
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "io.in(%%bundle_index%%)"
    inherits: ['signal']
}

platformType _HwOutput {
    typeName: '_hwOutput'
	inputs: ["real"]
#	numOutputs: 0
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "io.out(%%bundle_index%%) = %%intoken:0%%;"
    inherits: ['signal']
}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: _AudioDomain
}

_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: _AudioDomain
}

platformType _OscOutType {
    typeName: '_oscOutType'
    inputs: ["string", "string", "string", "int"]
#	numOutputs: 0
    include: ["lo/lo.h"]
    linkTo: ["lo"]
#    declarations: []
#    initializations: ["// INIT OSC"]
    processing: '
	char portStr[16];
	sprintf(portStr, "%d", (int) %%intoken:3%%);
	lo_address addr = lo_address_new(%%intoken:2%%.c_str(), portStr);
    lo_send(addr, %%intoken:1%%.c_str() , "f", %%intoken:0%%);
	'
    inherits: ['signal']
}

platformType _SelectType {
    typeName: '_selectType'
    inputs: ["bool", "any", "any"]
	outputs: ["any"]
#    include: []
#    linkTo: []
#    declarations: []
    initializations: ["// %%token%% = 0;"]
    processing: "%%intoken:0%% ? %%intoken:1%% : %%intoken:2%%"
    inherits: ['signal']
}

# Serial ------------------------

platformType _SerialOutType {
    typeName: '_serialOutType'
	inputs: ["string", "string"]
#	outputs: 0
    include: ["serial/serial.h", "iostream"]
	linkDir: ["serial/build"]
    linkTo: ["serial"]
#    declarations: ['']
    initializations: ["// Not implemented"]
    processing: "my_serial.write(test_string);
"
    inherits: ['signal']
}
#
##ifdef _WIN32
#//      Sleep(milliseconds); // 100 ms
##else
#//      usleep(milliseconds*1000); // 100 ms
##endif




platformType _SerialInType {
    typeName: '_serialInType'
#	inputs: 0
	outputs: ["string"]
	includeDir: ["serial/include"]
    include: ["serial/serial.h", "iostream"]
	linkDir: ["serial/build"]
    linkTo: ["serial"]
    declarations: ['
  unsigned long baud = 9600;
  std::string port ="";
  serial::Serial my_serial;'
	]
	constructors: [ 'my_serial(port, baud, serial::Timeout::simpleTimeout(1000))' ]
    initializations: ['
  if(my_serial.isOpen())
    std::cout << "Serial opened successfully." << std::endl;
  else
    std::cout << "ERROR: Failed to open serial.		" << std::endl;
		']
	globalDeclarations: []
	globalInitializations: []
	preProcessing: '
	std::string tempVar;
	std::string newChar;
	do {
		tempVar += newChar;
		newChar += my_serial.read(1);
		} while (newChar.size() > 0 && newChar != "\n");
	'
    processing: "tempVar"
    inherits: ['signal']
}

_domain _GammaDomain {
    name: "audio"
    platform: _GammaPlatform
}

_platform _GammaPlatform {
    name: "Gamma"
}

platformType _HwInput {
    typeName: '_hwInput'
	numInputs: 0
	numOutputs: 2
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.in(%%bundle_index%%)"
    inherits: ['signal']
}

platformType _HwOutput {
    typeName: '_hwOutput'
	numInputs: 2
	numOutputs: 0
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.out(%%bundle_index%%) = %%intoken:0%%;"
    inherits: ['signal']
}

constant PlatformRate {
    value: 44100
}

constant AudioRate {
    value: PlatformRate
}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: _GammaDomain
}

_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: _GammaDomain
}

# Sine function test
platformType _SineType {
    typeName: '_sineType'
    numInputs: 1
	numOutputs: 1
    include: ["cmath"]
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "std::sin(%%intoken:0%%)"
    inherits: ['signal']
}

platformModule Sine {
	input: Input
	output: Output
	properties: none # A property could be the type of input, (degrees, radians, etc.)
	internalBlocks: [
		signal Input {
			default : 0.0
			rate: AudioRate # FIXME needs to be streamRate
			domain: streamDomain
			meta: "Input angle in radians"
		},
		signal Output {
			default :       0.0
			rate:           AudioRate # FIXME needs to be streamRate
			domain:         streamDomain
			meta : "The sine of the angle." 
		}
		_sineType SineBlock {}
	]
	streams: [
		Input >> SineBlock >> Output;
	]
	meta: "Sine function"
}

constant _Pi {
    value: 3.14159265358979323846264338327950288419716939937510
}

platformModule Oscillator {
    input: none
    output: Output
    properties: [
			property FrequencyProperty {
				name: "frequency"
				block: Frequency
				meta: "The frequency of the oscillator."
			},
			property AmplitudeProperty {
				name: "amplitude"
				block: Amplitude
				meta: "The amplitude of the oscillator."
			},
#			property TypeProperty {
#				name: "type"
#				block: Type
#				meta: "Possible options are 'Sine', 'Triangle', 'Saw', 'ReverseSaw', 'Square'."
#			},
			property PhaseProperty {
				name: "phase"
				block: StartPhase
				meta: "The starting phase of the oscillator."
			},
			property ResetProperty {
				name: "reset"
				block: Reset
				meta: "Resets the oscillator to the starting phase."
			}
    ]
    internalBlocks: [
        signal Input {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        }
        signal Frequency {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal Amplitude {
                default :       1.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
#        signal Type {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
        signal StartPhase {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        switch Reset {
                default :       off
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal Phase {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal PhaseInc {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal NewPhase {}
        _sineType SineBlock {}
    ]
    streams: [
        Frequency * 2.0 * _Pi / AudioRate >> PhaseInc;
        Phase >> SineBlock >> Level(gain: Amplitude) >> Output;
        Phase + PhaseInc >> Phase;
        Phase -( 2 * _Pi) >> NewPhase;
        Phase > ( 2.0 * _Pi ) >> Select(whenOn: NewPhase whenOff: Phase) >> Phase;
		Reset >> Select(whenOn: StartPhase whenOff: Phase) >> Phase;
    ]
	meta: "Bipolar output [ -1. , 1. ] scaled by amplitude"
}


platformType _SelectType {
    typeName: '_selectType'
    numInputs: 3
	numOutputs: 1
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "%%intoken:0%% ? %%intoken:1%% : %%intoken:2%%"
    inherits: ['signal']
}

 # FIXME AudioRate needs to be streamRate
platformModule Select {
    input: Input
    output: Output
    properties:  [
		property WhenOnProperty {
    	   name: "whenOn"
           block: WhenOn
           meta: ""
        },
        property WhenOffProperty {
            name: "whenOff"
            block: WhenOff
            meta: ""
        }
    ]
    internalBlocks: [
        switch Input {
                default :       on
                rate:           AudioRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        signal WhenOn {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        signal WhenOff {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        _selectType SelectBlock {}
    ]
    streams: [
        [Input, WhenOn, WhenOff]  >> SelectBlock >> Output;
    ]
    meta: ""
}

_domain _GammaDomain {
    name: "audio"
    platform: _GammaPlatform
}

_platform _GammaPlatform {
    name: "Gamma"
}

platformType _HwInput {
    typeName: '_hwInput'
    direction: 'out'
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.in(%%bundle_index%%)"
    inherits: ['signal']
}

platformType _HwOutput {
    typeName: '_hwOutput'
    direction: 'in'
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.out(%%bundle_index%%) = %%intoken:0%%;"
    inherits: ['signal']
}

constant PlatformRate {
    value: 44100
}

constant AudioRate {
    value: PlatformRate
}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: _GammaDomain
}

_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: _GammaDomain
}

# Sine function test
platformType _SineType {
    typeName: '_sineType'
    direction: 'thru'
    include: ["cmath"]
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "std::sin(%%intoken:0%%)"
    inherits: ['signal']
}

platformModule Sine {
    input: Input
    output: Output
    properties: none # A property could be the type of input, (degrees, radians, etc.)
    internalBlocks: [
        signal Input {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        }
        _sineType SineBlock {}
    ]
    streams: [
        Input >> SineBlock >> Output;
    ]
    meta: ""
}

platformModule Oscillator {
    input: none
    output: Output
    properties: [
			property FrequencyProperty {
				name: "frequency"
				block: Frequency
			}
    ]
    internalBlocks: [
        signal Input {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        }
        signal Frequency {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain}
        signal Phase {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain}
        signal PhaseInc {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain}
        _sineType SineBlock {}
    ]
    streams: [
        Frequency * 2 * 3.14159 / AudioRate >> PhaseInc;
        Phase >> SineBlock >> Output;
        Phase + PhaseInc >> Phase;
    ]
    meta: ""
}


platformType _SelectType {
    typeName: '_selectType'
    direction: 'thru'
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "%%intoken:0%% ? %%intoken:1%% : %%intoken:2%%"
    inherits: ['signal']
}

 # FIXME AudioRate needs to be streamRate
platformModule Select {
    input: Input
    output: Output
    properties:  [
		property WhenOnProperty {
    	   name: "whenOn"
           block: WhenOn
           meta: ""
        },
        property WhenOffProperty {
            name: "whenOff"
            block: WhenOff
            meta: ""
        }
    ]
    internalBlocks: [
        switch Input {
                default :       on
                rate:           AudioRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        signal WhenOn {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        signal WhenOff {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        _selectType SelectBlock {}
    ]
    streams: [
        [Input, WhenOn, WhenOff]  >> SelectBlock >> Output;
    ]
    meta: ""
}

_domain _GammaDomain {
    name: "audio"
    platform: _GammaPlatform
}

_platform _GammaPlatform {
    name: "Gamma"
}

platformType _HwInput {
    typeName: '_hwInput'
    direction: 'out'
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.in(%%bundle_index%%)"
    inherits: 'signal'
}

platformType _HwOutput {
    typeName: '_hwOutput'
    direction: 'in'
    include: []
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "io.out(%%bundle_index%%) = %%intoken%%;"
    inherits: 'signal'
}

constant PlatformRate {
    value: 44100
}

constant AudioRate {
    value: PlatformRate
}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: _GammaDomain
}

_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: _GammaDomain
}

# Sine function test
platformType _SineType {
    typeName: '_sineType'
    direction: 'thru'
    include: ["cmath"]
    linkTo: []
    declarations: ''
    initialization: ["// %%token%% = 0;"]
    processing: "std::sin(%%intoken%%)"
    inherits: 'signal'
}

platformModule Sine {
    input: Input
    output: Output
    properties: none # A property could be the type of input, (degrees, radians, etc.)
    internalBlocks: [
        signal Input {
                default :       0.0
                rate:           streamRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           streamRate
                domain:         streamDomain
        }
        _sineType SineBlock {}
    ]
    streams: [
        Input >> SineBlock >> Output;
    ]
}


module Oscillator {
    input: none
    output: Output
    properties: [
			property FrequencyProperty {
				name: "frequency"
				block: Frequency
				meta: "The frequency of the oscillator."
			},
			property AmplitudeProperty {
				name: "amplitude"
				block: Amplitude
				meta: "The amplitude of the oscillator."
			},
#			property TypeProperty {
#				name: "type"
#				block: Type
#				meta: "Possible options are 'Sine', 'Triangle', 'Saw', 'ReverseSaw', 'Square'."
#			},
			property PhaseProperty {
				name: "phase"
				block: StartPhase
				meta: "The starting phase of the oscillator."
			},
			property ResetProperty {
				name: "reset"
				block: Reset
				meta: "Resets the oscillator to the starting phase."
			}
    ]
    internalBlocks: [
        signal Input {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        }
        signal Frequency {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal Amplitude {
                default :       1.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
#        signal Type {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
        signal StartPhase {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        switch Reset {
                default :       off
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal Phase {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal PhaseInc {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal NewPhase {}
        _sineType SineBlock {}
    ]
    streams: [
        Frequency * 2.0 * _Pi / AudioRate >> PhaseInc;
        Phase >> SineBlock >> Level(gain: Amplitude) >> Output;
        Phase + PhaseInc >> Phase;
        Phase -( 2 * _Pi) >> NewPhase;
        Phase > ( 2.0 * _Pi ) >> Select(whenOn: NewPhase whenOff: Phase) >> Phase;
		Reset >> Select(whenOn: StartPhase whenOff: Phase) >> Phase;
    ]
	meta: "Bipolar output [ -1. , 1. ] scaled by amplitude"
}


module Impulse {
    input: none
    output: Output
    properties: [
			property FrequencyProperty {
				name: "frequency"
				block: Frequency
				meta: "The frequency of the oscillator."
			},
			property AmplitudeProperty {
				name: "amplitude"
				block: Amplitude
				meta: "The amplitude of the oscillator."
			}
#			property TypeProperty {
#				name: "type"
#				block: Type
#				meta: "Possible options are 'Sine', 'Triangle', 'Saw', 'ReverseSaw', 'Square'."
#			},
#			property PhaseProperty {
#				name: "phase"
#				block: StartPhase
#				meta: "The starting phase of the oscillator."
#			},
#			property ResetProperty {
#				name: "reset"
#				block: Reset
#				meta: "Resets the oscillator to the starting phase."
#			}
    ]
    internalBlocks: [
        signal Output {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
        },
        signal Frequency {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		},
        signal Amplitude {
                default :       1.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		},
#        signal Type {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        signal StartPhase {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        switch Reset {Oscillator (frequency: 0.5) > 0 >> OnChange ()
#                default :       off
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
        signal Phase {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal PhaseInc {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal NewPhase {}
    ]
    streams: [
        Frequency / AudioRate >> PhaseInc;
        Phase + PhaseInc >> Phase;
        Phase - 1.0 >> NewPhase;
		Phase > 1.0 >> Select(whenOn: Amplitude whenOff: 0.0) >> Output;
        Phase > 1.0 >> Select(whenOn: NewPhase whenOff: Phase) >> Phase;
		#Reset >> Select(whenOn: StartPhase whenOff: Phase) >> Phase;
    ]
	meta: "Bipolar output [ -1. , 1. ] scaled by amplitude"
}


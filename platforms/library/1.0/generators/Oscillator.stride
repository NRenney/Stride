
module Oscillator {
    ports: [
		port OutputPort {
			main: on
			direction: "output"
			block: Output
			domain: OutputDomain
		}
		port FrequencyProperty {
			name: "frequency"
			block: Frequency
			default: 440.0
			meta: "The frequency of the oscillator."
			domain: FrequencyDomain
		},
		port AmplitudeProperty {
			name: "amplitude"
			block: Amplitude
			default: 1.0
			meta: "The amplitude of the oscillator."
#			domain: AmplitudeDomain
		},
#			property TypeProperty {
#				name: "type"
#				block: Type
#				meta: "Possible options are 'Sine', 'Triangle', 'Saw', 'ReverseSaw', 'Square'."
#			},
		port StartPhaseProperty {
			name: "phase"
			block: StartPhase
			meta: "The starting phase of the oscillator."
		},
		port ResetProperty {
			name: "reset"
			block: Reset
			meta: "Resets the oscillator to the starting phase."
			domain: ResetDomain
		}
    ]
    blocks: [
#        signal Frequency {
#			default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#		}
#        signal Amplitude {
#			default :       1.0
#			rate:           AudioRate # FIXME needs to be streamRate
#		}
#        signal Type {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        signal StartPhase {
#			default :       0.0
#		}
        switch Reset {
			default :       off
			domain: ResetDomain
		}
		signal ResetValue {
			domain: ResetDomain
		}
        signal Phase {
            default :       0.0
			domain: OutputDomain
		}
        signal PhaseInc {
			default :       0.0
			domain: FrequencyDomain
		}
        signal NewPhase {}
        _sineType SineBlock {}
    ]
    streams: [
        Frequency * 2.0 * _Pi / AudioRate >> PhaseInc;
        Phase >> SineBlock >> Level(gain: Amplitude) >> Output;
        Phase + PhaseInc >> Phase;
        Phase -( 2 * _Pi) >> NewPhase;
#        Phase > 1.0 >> Select(whenOn: NewPhase whenOff: Phase) >> Phase;
#		Reset >> Select(whenOn: StartPhase whenOff: Phase) >> ResetValue >> Phase; #This needs to be done in a reaction
    ]
	meta: "Bipolar output [ -1. , 1. ] scaled by amplitude"
}


module Impulse {
    ports: [
		port OutputPort {
			main: on
			direction: "output"
			block: Output
		},
		port FrequencyPort {
			name: "frequency"
			block: Frequency
			meta: "The frequency of the oscillator."
		},
		port AmplitudePort {
			name: "amplitude"
			block: Amplitude
			meta: "The amplitude of the oscillator."
		}
#			port TypeProperty {
#				name: "type"
#				block: Type
#				meta: "Possible options are 'Sine', 'Triangle', 'Saw', 'ReverseSaw', 'Square'."
#			},
#			port PhaseProperty {
#				name: "phase"
#				block: StartPhase
#				meta: "The starting phase of the oscillator."
#			},
#			port ResetProperty {
#				name: "reset"
#				block: Reset
#				meta: "Resets the oscillator to the starting phase."
#			}
    ]
    blocks: [
#        signal Frequency {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		},
#        signal Amplitude {
#                default :       1.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		},
#        signal Type {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        signal StartPhase {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        switch Reset {Oscillator (frequency: 0.5) > 0 >> OnChange ()
#                default :       off
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
        signal Phase {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal PhaseInc {
                default :       0.0
                rate:           AudioRate # FIXME needs to be streamRate
                domain:         streamDomain
		}
        signal NewPhase {}
    ]
    streams: [
        Frequency / AudioRate >> PhaseInc;
        Phase + PhaseInc >> Phase;
        Phase - 1.0 >> NewPhase;
#		Phase > 1.0 >> Select(whenOn: Amplitude whenOff: 0.0) >> Output;
#        Phase > 1.0 >> Select(whenOn: NewPhase whenOff: Phase) >> Phase;
		#Reset >> Select(whenOn: StartPhase whenOff: Phase) >> Phase;
    ]
	meta: "Bipolar output [ -1. , 1. ] scaled by amplitude"
}

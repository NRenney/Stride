
module Greater {
    ports: [
    port OutputPort {
        name:       'output'
        main: on
        direction:  'output'
    },
    port InputPort {
        name:       'input'
        main: on
        size: 2
        direction:  'input'
    }
    ]
    blocks: [
    ]
    streams: [
#       Input[1] > Input[2] >> Output;
    ]
    meta: ""
}

module GreaterOrEqual {
    ports: [
    port OutputPort {
        name:       'output'
        main: on
        direction:  'output'
    },
    port InputPort {
        name:       'input'
        main: on
        size: 2
        direction:  'input'
    }
    ]
    blocks: [
    ]
    streams: [
#       Input[1] >= Input[2] >> Output;
    ]
    meta: ""
}

module Less {

ports: [
port OutputPort {
    name:       'output'
    main: on
    direction:  'output'
},
port InputPort {
    name:       'input'
    main: on
    size: 2
    direction:  'input'
}
]
    blocks: [
    ]
    streams: [
#       Input[1] < Input[2] >> Output;
    ]
    meta: ""
}

module LessOrEqual {

ports: [
port OutputPort {
    name:       'output'
    main: on
    direction:  'output'
},
port InputPort {
    name:       'input'
    main: on
    size: 2
    direction:  'input'
}
]
    blocks: [
    ]
    streams: [
#       Input[1] <= Input[2] >> Output;
    ]
    meta: ""
}

module Equal {

ports: [
port OutputPort {
    name:       'output'
    main: on
    direction:  'output'
},
port InputPort {
    name:       'input'
    main: on
    size: 2
    direction:  'input'
}
]
    blocks: [
    ]
    streams: [
#       Input[1] == Input[2] >> Output;
    ]
    meta: ""
}

module NotEqual {

	ports: [
		port OutputPort {
			name:       'output'
			main: on
			direction:  'output'
		},
		port InputPort {
			name:       'input'
			main: on
			size: 2
			direction:  'input'
		}
	]
    blocks: [
    ]
    streams: [
#       Input[1] != Input[2] >> Output;
    ]
    meta: ""
}

 # FIXME AudioRate needs to be streamRate
module Select {

	ports: [
		port OutputPort {
			name:       'output'
			main: on
			direction:  'output'
		},
		port InputPort {
			name:       'input'
			main: on
			block: Input
			direction:  'input'
		},
		port WhenOnProperty {
			name: "whenOn"
			block: WhenOn
			meta: ""
			domain: WhenOnDomain
        },
		port WhenOffProperty {
			name: "whenOff"
			block: WhenOff
			meta: ""
			domain: WhenOffDomain
        }
    ]
    blocks: [
        _selectType SelectBlock {}
    ]
    streams: [
        [Input, WhenOn, WhenOff]  >> SelectBlock >> Output;
    ]
    meta: ""
}

 # FIXME AudioRate needs to be streamRate
module OnChange {

ports: [
port OutputPort {
    name:       'output'
    main: on
    block: Output
    direction:  'output'
},
port InputPort {
    name:       'input'
    main: on
    block: Input
    direction:  'input'
}
]
    ports:  [
    ]
    blocks: [
        switch Input {
                default :       off
                rate:           AudioRate
                domain:         streamDomain
        },
        switch Output {
                default :       off
                rate:           AudioRate
                domain:         streamDomain
        },
		switch OldInput {},
		reaction OnChangedReaction {
			output: Output
			ports: [
            port OutputPort {
            name:       'output'
            main: on
            block: Output
            direction:  'output'
        },
				port OutputProperty {
					name: "output"
					block: OutputValue
#					type: [""] # Any type for now
				}
			]
#			onExecution:
#			terminateWhen:
			blocks: [
				switch Output { }
				switch OutputValue {}
			]
			streams: [
				OutputValue >> Output;
			]
		}
    ]
    streams: [
#        Input != OldInput  >> OnChangedReaction(output: Input) >> Output;
		Input >> OldInput;
    ]
    meta: "Discard repetitions of a value. Can be use to turn synchronous signals to asynchronous messages."
}

module Compare {
    input: Input
    output: Output
    ports: [
    port OutputPort {
        name:       'output'
        main: on
        block: Output
        direction:  'output'
    },
    port InputPort {
        name:       'input'
        main: on
        size: 2
        direction:  'input'
    },
    port OperatorProperty {
			name: "operator"
			block: Operator
#			type: [""] # Any type for now
		},
		port ValueProperty {
			name: "value"
			block: Value
#			type: [""] # Any type for now
		}
	]
    blocks: [
        switch Output {},
		signal Operator {},
		signal Value {}
    ]
    streams: [

    ]
    meta: "Not implemented..."
}

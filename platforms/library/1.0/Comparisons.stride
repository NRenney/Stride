 
module Greater {
    input: Input
    output: Output
    internalBlocks: [
        signal Input[2] {},
        switch Output {}
    ]
    streams: [
       Input[1] > Input[2] >> Output;
    ]
    meta: ""
}

module GreaterOrEqual {
    input: Input
    output: Output
    internalBlocks: [
        signal Input[2] {},
        switch Output {}
    ]
    streams: [
       Input[1] >= Input[2] >> Output;
    ]
    meta: ""
}

module Less {
    input: Input
    output: Output
    internalBlocks: [
        signal Input[2] {},
        switch Output {}
    ]
    streams: [
       Input[1] < Input[2] >> Output;
    ]
    meta: ""
}

module LessOrEqual {
    input: Input
    output: Output
    internalBlocks: [
        signal Input[2] {},
        switch Output {}
    ]
    streams: [
       Input[1] <= Input[2] >> Output;
    ]
    meta: ""
}

module Equal {
    input: Input
    output: Output
    internalBlocks: [
        signal Input[2] {},
        switch Output {}
    ]
    streams: [
       Input[1] == Input[2] >> Output;
    ]
    meta: ""
}

module NotEqual {
    input: Input
    output: Output
    internalBlocks: [
        signal Input[2] {},
        switch Output {}
    ]
    streams: [
       Input[1] != Input[2] >> Output;
    ]
    meta: ""
}

 # FIXME AudioRate needs to be streamRate
module Select {
    input: Input
    output: Output
    properties:  [
		property WhenOnProperty {
    	   name: "whenOn"
           block: WhenOn
           meta: ""
        },
        property WhenOffProperty {
            name: "whenOff"
            block: WhenOff
            meta: ""
        }
    ]
    internalBlocks: [
        switch Input {
                default :       on
                rate:           AudioRate
                domain:         streamDomain
        },
        signal Output {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        signal WhenOn {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        signal WhenOff {
                default :       0.0
                rate:           AudioRate
                domain:         streamDomain
        },
        _selectType SelectBlock {}
    ]
    streams: [
        [Input, WhenOn, WhenOff]  >> SelectBlock >> Output;
    ]
    meta: ""
}

 # FIXME AudioRate needs to be streamRate
module OnChange {
    input: Input
    output: Output
    properties:  [
    ]
    internalBlocks: [
        switch Input {
                default :       off
                rate:           AudioRate
                domain:         streamDomain
        },
        switch Output {
                default :       off
                rate:           AudioRate
                domain:         streamDomain
        },
		switch OldInput {},
		reaction OnChangedReaction {
			output: Output
			properties: [
				property OutputProperty {
					name: "output"
					block: OutputValue
					types: [""] # Any type for now
				}
			]
#			onExecution:
#			terminateWhen:
			internalBlocks: [
				switch Output { }
				switch OutputValue {}
			]
			streams: [
				OutputValue >> Output;
			]
		}
    ]
    streams: [
        Input != OldInput  >> OnChangedReaction(output: Input) >> Output;
		Input >> OldInput;
    ]
    meta: "Discard repetitions of a value. Can be use to turn synchronous signals to asynchronous messages."
}

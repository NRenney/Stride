type Rated {
	typeName: "rated"
	ports: [ 
		port TypeName {
			name: "rate"
			types: ["", "none"]
			default: none
			required: on
		},
		port TypeName {
			name: "reset"
			types: ["", "none"]
			default: none
			required: off
		}
	]
	inherits: "domainMember" # TODO: Should we be able to say "DomainMember" here instead?
}

type Streamable {
	typeName: "streamable"
	portsPorts: [
		port InputName {
			name: "inputName"
			types: ["", "none"]
			default: none
			required: off
		},
		port OutputName {
			name: "outputName"
			types: ["", "none"]
			default: none
			required: off
		}
	]
	inherits: "rated"
}

type DomainMember {
	typeName: "domainMember"
	ports: [ 
		port TypeName {
			name: "domain"
			types: ["", "none"]
			default: none
			required: on
		}
	]
}

type Type {
	typeName: "type"
	ports: [ 
		port TypeName {
			name: "typeName"
			types: ["CSP", "none"]
			default: none
			required: on
		},
		port Ports {
			name: "ports"
			types: ["", "none"] # TODO how to validate object lists?
			default: none
			required: on
		}
	]
}

type Port {
	typeName: "port"
	ports: [
		port Name {
			name: "name"
			types: ["CSP", "none"]
			default: none
			required: on
		},
		port Direction {
			name: "direction"
			types: ["CSP", "none"]
			default: "output"
			required: off
		},
		port Types {
			name: "types"
			types: ["CSP", "none"]
			default: none
			required: on
		},
		port Default {
			name: "default"
			types: ["CSP", "none"] # TODO how to handle hybrid port types?
			default: none
			required: on
		},
		port Required {
			name: "required"
			types: ["CBP", "none"] 
			default: none
			required: on
		}
	]
}

type Base {
typeName: "base"
ports: [ 
		port Inherits {
			name: "inherits"
			types: ["CSP", "none"]
			default: "base"
			required: off
		},
		port Meta {
			name: "meta"
			types: ["CSP", "none"]
			default: none
			required: off
		}
		]
} 

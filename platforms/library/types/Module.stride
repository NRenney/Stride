type _Property {
	typeName: "property"
	ports: [
		port Name {
			name: "name"
			types: ["CSP"]
			default: none
			required: on
		},
		port Block {
			name: "block"
			types: [""] # This should be made to accept type handles
			default: none
			required: on
		},
		port Types {
			name: "types"
			types: [""] # This should be made to accept type handles
			default: [""]
			required: off
		}
	]
	inherits: ["base"]
	meta: ""
}


type _Hybrid {
	typeName: "hybrid"
	ports: [
		port Name {
			name: "type"
			types: ["CSP"]
			default: none
			required: on
		},
		port Block {
			name: "default"
			types: [""]
			default: none
			required: on
		}
	]
	inherits: ["rated"] # TODO could we use Rated here instead?
}

type _Module {
	typeName: "module"
	ports: [
		port Input {
			name: "input"
			types: [""]
			default: Input
			required: off
		},
		port Output {
			name: "output"
			types: [""]
			default: Output
			required: off
		},
		port Properties {
			name: "properties"
			types: [ "" ]  # TODO: How can we define list types here?
			default: none
			required: on
		},
		port InternalBlocks {
			name: "internalBlocks"
			types: [""] # TODO how to accept lists?
			default: none
			required: on
		},
		port Streams {
			name: "streams"
			types: [""]
			default: none
			required: on
		}

	]
	meta: "Module Type Doc"
}

type _Reaction {
	typeName: "reaction"
	ports: [
		port Output {
			name: "output"
			types: [""]
			default: Output
			required: on
		},
		port Properties {
			name: "properties"
			types: [ "" ]  # TODO: How can we define list types here?
			default: none
			required: off
		},
		port OnExecution {
			name: "onExecution"
			types: [""]
			default: Input
			required: on
		},
		port TerminateWhen {
			name: "terminateWhen"
			types: [""]
			default: none
			required: off
		},
		port InternalBlocks {
			name: "internalBlocks"
			types: [""]
			default: none
			required: on
		},
		port Streams {
			name: "streams"
			types: [""]
			default: none
			required: on
		}
	]
}

type _PlatformPort {
	typeName: "platformPort"
	ports: [
		port Name {
			name: "name"
			types: ["CSP", ""]
			default: none
			required: on
		},
		port Types {
			name: "types"
			types: ["CSP", ""]
			default: none
			required: on
		},
		port Default {
			name: "default"
			types: ["CSP", ""] # TODO how to handle hybrid port types?
			default: none
			required: on
		},
		port Required {
			name: "required"
			types: ["CBP", ""]
			default: none
			required: on
		}

	]
}

type _PlatformModule {
	typeName: "platformModule"
	ports: [
		platformPort Input {
			name: "input"
			types: [""]
			default: none
			required: on
		},
		platformPort Output {
			name: "output"
			types: [""]
			default: none
			required: on
		},
		platformPort Properties {
			name: "properties"
			types: [ "" ]  # How can we define list types here?
			default: none
			required: on
		},
		platformPort InternalBlocks {
			name: "internalBlocks"
			types: [""]
			default: none
			required: on
		},
		port Streams {
			name: "streams"
			types: [""]
			default: none
			required: on
		}#,
		#port Inherits { # TODO should this be done differently? e.g. not as a port but through inheritance merging ports?
#			name: "inherits"
#			types: ["CSP"] # _platform
#			default: []
#			required: off
#		}
	]
	inherits: ['base'] # Can't inherit from "module" as it requires ports of type platformPort
}
